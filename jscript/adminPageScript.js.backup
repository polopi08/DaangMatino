

document.addEventListener('DOMContentLoaded', function() {
    
    initializeDashboard();
    
    
    const tableRows = document.querySelectorAll('.reports-table tbody tr');
    tableRows.forEach(row => {
        row.addEventListener('click', function() {
            
            console.log('Row clicked:', this.querySelector('td:nth-child(2)').textContent);
        });
    });
    
    
    const viewAllBtn = document.querySelector('.view-all-btn');
    if (viewAllBtn) {
        viewAllBtn.addEventListener('click', function() {
            loadAllReports();
        });
    }

    
    const refreshBtnAdmin = document.getElementById('refreshBtnAdmin');
    if (refreshBtnAdmin) {
        refreshBtnAdmin.addEventListener('click', function() {
            refreshBtnAdmin.innerHTML = '<i class="bx bx-loader-alt bx-spin"></i> Refreshing...';
            setTimeout(async () => {
                await loadAnalyticsData();
                refreshBtnAdmin.innerHTML = '<i class="bx bx-refresh"></i> Refresh';
            }, 1000);
        });
    }

    
    const chartSegments = document.querySelectorAll('.pie-chart circle');
    const legendItems = document.querySelectorAll('.legend-item');
    
    chartSegments.forEach((segment, index) => {
        segment.addEventListener('mouseenter', function() {
            if (legendItems[index]) {
                legendItems[index].style.transform = 'scale(1.1)';
                legendItems[index].style.fontWeight = 'bold';
            }
        });
        
        segment.addEventListener('mouseleave', function() {
            if (legendItems[index]) {
                legendItems[index].style.transform = 'scale(1)';
                legendItems[index].style.fontWeight = 'normal';
            }
        });
    });    
    async function initializeDashboard() {
        try {
            
            if (typeof window.DatabaseService !== 'undefined' && !DatabaseService.isAvailable()) {
                showNotification(
                    'Demo Mode: Database not configured. Showing sample data. Check console for setup instructions.', 
                    'info', 
                    8000
                );
            }

            
            await loadDashboardStats();
            
            
            await loadRecentReports();

            
            await loadAnalyticsData();
            
            console.log('Dashboard initialized with real data');
        } catch (error) {
            console.error('Error initializing dashboard:', error);
            showNotification('Failed to load dashboard data. Using sample data.', 'warning');
        }
    }

    async function loadAnalyticsData() {
        try {
            
            await Promise.all([
                loadAnalyticsStats(),
                loadMostReportedRoads(),
                loadMostUrgentRoads(),
                loadIssueTypesDistribution(),
                loadAffectedAreas(),
                loadRecentActivityAdmin()
            ]);

            console.log('Analytics data loaded successfully');
        } catch (error) {
            console.error('Error loading analytics data:', error);
        }
    }

    async function loadAnalyticsStats() {
        try {
            const statsResult = await DatabaseService.getReportStats();
            
            if (statsResult.success) {
                const stats = statsResult.data;
                
                
                updateElement('totalReportsAdmin', stats.total || 0);
                updateElement('criticalReportsAdmin', stats.byPriority?.critical || 0);
                updateElement('affectedAreasAdmin', Object.keys(stats.byIssueType || {}).length);
                updateElement('recentReportsAdmin', stats.recent || 0);
            }
        } catch (error) {
            console.error('Error loading analytics stats:', error);
        }
    }

    async function loadMostReportedRoads() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const reports = reportsResult.data;
                const roadCounts = {};
                
                
                reports.forEach(report => {
                    const location = report.location_description || 'Unknown Location';
                    roadCounts[location] = (roadCounts[location] || 0) + 1;
                });
                
                
                const sortedRoads = Object.entries(roadCounts)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5);
                
                updateLeaderboard('mostReportedListAdmin', sortedRoads, 'reports');
            }
        } catch (error) {
            console.error('Error loading most reported roads:', error);
        }
    }

    async function loadMostUrgentRoads() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const urgentReports = reportsResult.data
                    .filter(report => ['critical', 'high'].includes(report.priority?.toLowerCase()))
                    .sort((a, b) => {
                        const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };
                        return (priorityOrder[b.priority?.toLowerCase()] || 0) - 
                               (priorityOrder[a.priority?.toLowerCase()] || 0);
                    })
                    .slice(0, 5);
                
                updateUrgentList('mostUrgentListAdmin', urgentReports);
            }
        } catch (error) {
            console.error('Error loading most urgent roads:', error);
        }
    }

    async function loadIssueTypesDistribution() {
        try {
            const statsResult = await DatabaseService.getReportStats();
            
            if (statsResult.success) {
                const issueTypes = Object.entries(statsResult.data.byIssueType || {})
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5);
                
                updateLeaderboard('issueTypesListAdmin', issueTypes, 'issues');
            }
        } catch (error) {
            console.error('Error loading issue types:', error);
        }
    }

    async function loadAffectedAreas() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const areaCounts = {};
                
                
                reportsResult.data.forEach(report => {
                    const location = report.location_description || 'Unknown Area';
                    
                    const area = location.split(',')[0] || location.substring(0, 30);
                    areaCounts[area] = (areaCounts[area] || 0) + 1;
                });
                
                const sortedAreas = Object.entries(areaCounts)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5);
                
                updateLeaderboard('affectedAreasListAdmin', sortedAreas, 'reports');
            }
        } catch (error) {
            console.error('Error loading affected areas:', error);
        }
    }

    async function loadRecentActivityAdmin() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const recentReports = reportsResult.data
                    .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
                    .slice(0, 10);
                
                updateRecentActivity('recentActivityAdmin', recentReports);
            }
        } catch (error) {
            console.error('Error loading recent activity:', error);
        }
    }

    function updateElement(id, value) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
        }
    }

    function updateLeaderboard(containerId, data, type) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        if (data.length === 0) {
            container.innerHTML = '<div class="loading">No data available</div>';
            return;
        }
        
        const html = data.map(([name, count], index) => `
            <div class="leaderboard-item">
                <div class="leaderboard-rank">${index + 1}</div>
                <div class="leaderboard-info">
                    <h4>${truncateText(name, 40)}</h4>
                    <p>${count} ${type}</p>
                </div>
                <div class="leaderboard-count">${count}</div>
            </div>
        `).join('');
        
        container.innerHTML = html;
    }

    function updateUrgentList(containerId, reports) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        if (reports.length === 0) {
            container.innerHTML = '<div class="loading">No urgent reports</div>';
            return;
        }
        
        const html = reports.map((report, index) => `
            <div class="leaderboard-item">
                <div class="leaderboard-rank">${index + 1}</div>
                <div class="leaderboard-info">
                    <h4>${truncateText(report.location_description || 'Unknown Location', 40)}</h4>
                    <p>${report.issue_type || 'Unknown Issue'} - ${report.priority || 'Unknown'} Priority</p>
                </div>
                <div class="leaderboard-count priority-${report.priority?.toLowerCase() || 'unknown'}">${report.priority || '?'}</div>
            </div>
        `).join('');
        
        container.innerHTML = html;
    }

    function updateRecentActivity(containerId, reports) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        if (reports.length === 0) {
            container.innerHTML = '<div class="loading">No recent activity</div>';
            return;
        }
        
        const html = reports.map(report => {
            const priority = report.priority?.toLowerCase() || 'medium';
            const icon = getSeverityIcon(report.priority);
            const timeAgo = getTimeAgo(report.created_at);
            
            return `
                <div class="activity-item">
                    <div class="activity-icon ${priority}">
                        <i class='bx ${icon}'></i>
                    </div>
                    <div class="activity-content">
                        <h4>${truncateText(report.location_description || 'Unknown Location', 35)}</h4>
                        <p>${truncateText(report.description || report.issue_type || 'No description', 50)}</p>
                    </div>
                    <div class="activity-time">${timeAgo}</div>
                </div>
            `;
        }).join('');
        
        container.innerHTML = html;
    }

    function getTimeAgo(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        const diffMs = now - date;
        const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
        const diffDays = Math.floor(diffHours / 24);
        
        if (diffDays > 0) {
            return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;
        } else if (diffHours > 0) {
            return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;
        } else {
            return 'Recently';
        }
    }

    
    async function initializeDashboard() {
        try {
            
            if (typeof window.DatabaseService !== 'undefined' && !DatabaseService.isAvailable()) {
                showNotification(
                    'Demo Mode: Database not configured. Showing sample data. Check console for setup instructions.', 
                    'info', 
                    8000
                );
            }

            
            await loadDashboardStats();
            
            
            await loadRecentReports();

            
            await loadAnalyticsData();
            
            console.log('Dashboard initialized with real data');
        } catch (error) {
            console.error('Error initializing dashboard:', error);
            showNotification('Failed to load dashboard data. Using sample data.', 'warning');
        }
    }

    async function loadAnalyticsData() {
        try {
            
            await Promise.all([
                loadAnalyticsStats(),
                loadMostReportedRoads(),
                loadMostUrgentRoads(),
                loadIssueTypesDistribution(),
                loadAffectedAreas(),
                loadRecentActivityAdmin()
            ]);

            console.log('Analytics data loaded successfully');
        } catch (error) {
            console.error('Error loading analytics data:', error);
        }
    }

    async function loadAnalyticsStats() {
        try {
            const statsResult = await DatabaseService.getReportStats();
            
            if (statsResult.success) {
                const stats = statsResult.data;
                
                
                updateElement('totalReportsAdmin', stats.total || 0);
                updateElement('criticalReportsAdmin', stats.byPriority?.critical || 0);
                updateElement('affectedAreasAdmin', Object.keys(stats.byIssueType || {}).length);
                updateElement('recentReportsAdmin', stats.recent || 0);
            }
        } catch (error) {
            console.error('Error loading analytics stats:', error);
        }
    }

    async function loadMostReportedRoads() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const reports = reportsResult.data;
                const roadCounts = {};
                
                
                reports.forEach(report => {
                    const location = report.location_description || 'Unknown Location';
                    roadCounts[location] = (roadCounts[location] || 0) + 1;
                });
                
                
                const sortedRoads = Object.entries(roadCounts)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5);
                
                updateLeaderboard('mostReportedListAdmin', sortedRoads, 'reports');
            }
        } catch (error) {
            console.error('Error loading most reported roads:', error);
        }
    }

    async function loadMostUrgentRoads() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const urgentReports = reportsResult.data
                    .filter(report => ['critical', 'high'].includes(report.priority?.toLowerCase()))
                    .sort((a, b) => {
                        const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };
                        return (priorityOrder[b.priority?.toLowerCase()] || 0) - 
                               (priorityOrder[a.priority?.toLowerCase()] || 0);
                    })
                    .slice(0, 5);
                
                updateUrgentList('mostUrgentListAdmin', urgentReports);
            }
        } catch (error) {
            console.error('Error loading most urgent roads:', error);
        }
    }

    async function loadIssueTypesDistribution() {
        try {
            const statsResult = await DatabaseService.getReportStats();
            
            if (statsResult.success) {
                const issueTypes = Object.entries(statsResult.data.byIssueType || {})
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5);
                
                updateLeaderboard('issueTypesListAdmin', issueTypes, 'issues');
            }
        } catch (error) {
            console.error('Error loading issue types:', error);
        }
    }

    async function loadAffectedAreas() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const areaCounts = {};
                
                
                reportsResult.data.forEach(report => {
                    const location = report.location_description || 'Unknown Area';
                    
                    const area = location.split(',')[0] || location.substring(0, 30);
                    areaCounts[area] = (areaCounts[area] || 0) + 1;
                });
                
                const sortedAreas = Object.entries(areaCounts)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5);
                
                updateLeaderboard('affectedAreasListAdmin', sortedAreas, 'reports');
            }
        } catch (error) {
            console.error('Error loading affected areas:', error);
        }
    }

    async function loadRecentActivityAdmin() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const recentReports = reportsResult.data
                    .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
                    .slice(0, 10);
                
                updateRecentActivity('recentActivityAdmin', recentReports);
            }
        } catch (error) {
            console.error('Error loading recent activity:', error);
        }
    }

    function updateElement(id, value) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
        }
    }

    function updateLeaderboard(containerId, data, type) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        if (data.length === 0) {
            container.innerHTML = '<div class="loading">No data available</div>';
            return;
        }
        
        const html = data.map(([name, count], index) => `
            <div class="leaderboard-item">
                <div class="leaderboard-rank">${index + 1}</div>
                <div class="leaderboard-info">
                    <h4>${truncateText(name, 40)}</h4>
                    <p>${count} ${type}</p>
                </div>
                <div class="leaderboard-count">${count}</div>
            </div>
        `).join('');
        
        container.innerHTML = html;
    }

    function updateUrgentList(containerId, reports) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        if (reports.length === 0) {
            container.innerHTML = '<div class="loading">No urgent reports</div>';
            return;
        }
        
        const html = reports.map((report, index) => `
            <div class="leaderboard-item">
                <div class="leaderboard-rank">${index + 1}</div>
                <div class="leaderboard-info">
                    <h4>${truncateText(report.location_description || 'Unknown Location', 40)}</h4>
                    <p>${report.issue_type || 'Unknown Issue'} - ${report.priority || 'Unknown'} Priority</p>
                </div>
                <div class="leaderboard-count priority-${report.priority?.toLowerCase() || 'unknown'}">${report.priority || '?'}</div>
            </div>
        `).join('');
        
        container.innerHTML = html;
    }

    function updateRecentActivity(containerId, reports) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        if (reports.length === 0) {
            container.innerHTML = '<div class="loading">No recent activity</div>';
            return;
        }
        
        const html = reports.map(report => {
            const priority = report.priority?.toLowerCase() || 'medium';
            const icon = getSeverityIcon(report.priority);
            const timeAgo = getTimeAgo(report.created_at);
            
            return `
                <div class="activity-item">
                    <div class="activity-icon ${priority}">
                        <i class='bx ${icon}'></i>
                    </div>
                    <div class="activity-content">
                        <h4>${truncateText(report.location_description || 'Unknown Location', 35)}</h4>
                        <p>${truncateText(report.description || report.issue_type || 'No description', 50)}</p>
                    </div>
                    <div class="activity-time">${timeAgo}</div>
                </div>
            `;
        }).join('');
        
        container.innerHTML = html;
    }

    function getTimeAgo(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        const diffMs = now - date;
        const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
        const diffDays = Math.floor(diffHours / 24);
        
        if (diffDays > 0) {
            return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;
        } else if (diffHours > 0) {
            return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;
        } else {
            return 'Recently';
        }
    }

    
    async function initializeDashboard() {
        try {
            
            if (typeof window.DatabaseService !== 'undefined' && !DatabaseService.isAvailable()) {
                showNotification(
                    'Demo Mode: Database not configured. Showing sample data. Check console for setup instructions.', 
                    'info', 
                    8000
                );
            }

            
            await loadDashboardStats();
            
            
            await loadRecentReports();

            
            await loadAnalyticsData();
            
            console.log('Dashboard initialized with real data');
        } catch (error) {
            console.error('Error initializing dashboard:', error);
            showNotification('Failed to load dashboard data. Using sample data.', 'warning');
        }
    }

    async function loadAnalyticsData() {
        try {
            
            await Promise.all([
                loadAnalyticsStats(),
                loadMostReportedRoads(),
                loadMostUrgentRoads(),
                loadIssueTypesDistribution(),
                loadAffectedAreas(),
                loadRecentActivityAdmin()
            ]);

            console.log('Analytics data loaded successfully');
        } catch (error) {
            console.error('Error loading analytics data:', error);
        }
    }

    async function loadAnalyticsStats() {
        try {
            const statsResult = await DatabaseService.getReportStats();
            
            if (statsResult.success) {
                const stats = statsResult.data;
                
                
                updateElement('totalReportsAdmin', stats.total || 0);
                updateElement('criticalReportsAdmin', stats.byPriority?.critical || 0);
                updateElement('affectedAreasAdmin', Object.keys(stats.byIssueType || {}).length);
                updateElement('recentReportsAdmin', stats.recent || 0);
            }
        } catch (error) {
            console.error('Error loading analytics stats:', error);
        }
    }

    async function loadMostReportedRoads() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const reports = reportsResult.data;
                const roadCounts = {};
                
                
                reports.forEach(report => {
                    const location = report.location_description || 'Unknown Location';
                    roadCounts[location] = (roadCounts[location] || 0) + 1;
                });
                
                
                const sortedRoads = Object.entries(roadCounts)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5);
                
                updateLeaderboard('mostReportedListAdmin', sortedRoads, 'reports');
            }
        } catch (error) {
            console.error('Error loading most reported roads:', error);
        }
    }

    async function loadMostUrgentRoads() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const urgentReports = reportsResult.data
                    .filter(report => ['critical', 'high'].includes(report.priority?.toLowerCase()))
                    .sort((a, b) => {
                        const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };
                        return (priorityOrder[b.priority?.toLowerCase()] || 0) - 
                               (priorityOrder[a.priority?.toLowerCase()] || 0);
                    })
                    .slice(0, 5);
                
                updateUrgentList('mostUrgentListAdmin', urgentReports);
            }
        } catch (error) {
            console.error('Error loading most urgent roads:', error);
        }
    }

    async function loadIssueTypesDistribution() {
        try {
            const statsResult = await DatabaseService.getReportStats();
            
            if (statsResult.success) {
                const issueTypes = Object.entries(statsResult.data.byIssueType || {})
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5);
                
                updateLeaderboard('issueTypesListAdmin', issueTypes, 'issues');
            }
        } catch (error) {
            console.error('Error loading issue types:', error);
        }
    }

    async function loadAffectedAreas() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const areaCounts = {};
                
                
                reportsResult.data.forEach(report => {
                    const location = report.location_description || 'Unknown Area';
                    
                    const area = location.split(',')[0] || location.substring(0, 30);
                    areaCounts[area] = (areaCounts[area] || 0) + 1;
                });
                
                const sortedAreas = Object.entries(areaCounts)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5);
                
                updateLeaderboard('affectedAreasListAdmin', sortedAreas, 'reports');
            }
        } catch (error) {
            console.error('Error loading affected areas:', error);
        }
    }

    async function loadRecentActivityAdmin() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const recentReports = reportsResult.data
                    .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
                    .slice(0, 10);
                
                updateRecentActivity('recentActivityAdmin', recentReports);
            }
        } catch (error) {
            console.error('Error loading recent activity:', error);
        }
    }

    function updateElement(id, value) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
        }
    }

    function updateLeaderboard(containerId, data, type) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        if (data.length === 0) {
            container.innerHTML = '<div class="loading">No data available</div>';
            return;
        }
        
        const html = data.map(([name, count], index) => `
            <div class="leaderboard-item">
                <div class="leaderboard-rank">${index + 1}</div>
                <div class="leaderboard-info">
                    <h4>${truncateText(name, 40)}</h4>
                    <p>${count} ${type}</p>
                </div>
                <div class="leaderboard-count">${count}</div>
            </div>
        `).join('');
        
        container.innerHTML = html;
    }

    function updateUrgentList(containerId, reports) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        if (reports.length === 0) {
            container.innerHTML = '<div class="loading">No urgent reports</div>';
            return;
        }
        
        const html = reports.map((report, index) => `
            <div class="leaderboard-item">
                <div class="leaderboard-rank">${index + 1}</div>
                <div class="leaderboard-info">
                    <h4>${truncateText(report.location_description || 'Unknown Location', 40)}</h4>
                    <p>${report.issue_type || 'Unknown Issue'} - ${report.priority || 'Unknown'} Priority</p>
                </div>
                <div class="leaderboard-count priority-${report.priority?.toLowerCase() || 'unknown'}">${report.priority || '?'}</div>
            </div>
        `).join('');
        
        container.innerHTML = html;
    }

    function updateRecentActivity(containerId, reports) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        if (reports.length === 0) {
            container.innerHTML = '<div class="loading">No recent activity</div>';
            return;
        }
        
        const html = reports.map(report => {
            const priority = report.priority?.toLowerCase() || 'medium';
            const icon = getSeverityIcon(report.priority);
            const timeAgo = getTimeAgo(report.created_at);
            
            return `
                <div class="activity-item">
                    <div class="activity-icon ${priority}">
                        <i class='bx ${icon}'></i>
                    </div>
                    <div class="activity-content">
                        <h4>${truncateText(report.location_description || 'Unknown Location', 35)}</h4>
                        <p>${truncateText(report.description || report.issue_type || 'No description', 50)}</p>
                    </div>
                    <div class="activity-time">${timeAgo}</div>
                </div>
            `;
        }).join('');
        
        container.innerHTML = html;
    }

    function getTimeAgo(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        const diffMs = now - date;
        const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
        const diffDays = Math.floor(diffHours / 24);
        
        if (diffDays > 0) {
            return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;
        } else if (diffHours > 0) {
            return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;
        } else {
            return 'Recently';
        }
    }

    
    async function initializeDashboard() {
        try {
            
            if (typeof window.DatabaseService !== 'undefined' && !DatabaseService.isAvailable()) {
                showNotification(
                    'Demo Mode: Database not configured. Showing sample data. Check console for setup instructions.', 
                    'info', 
                    8000
                );
            }

            
            await loadDashboardStats();
            
            
            await loadRecentReports();

            
            await loadAnalyticsData();
            
            console.log('Dashboard initialized with real data');
        } catch (error) {
            console.error('Error initializing dashboard:', error);
            showNotification('Failed to load dashboard data. Using sample data.', 'warning');
        }
    }

    async function loadAnalyticsData() {
        try {
            
            await Promise.all([
                loadAnalyticsStats(),
                loadMostReportedRoads(),
                loadMostUrgentRoads(),
                loadIssueTypesDistribution(),
                loadAffectedAreas(),
                loadRecentActivityAdmin()
            ]);

            console.log('Analytics data loaded successfully');
        } catch (error) {
            console.error('Error loading analytics data:', error);
        }
    }

    async function loadAnalyticsStats() {
        try {
            const statsResult = await DatabaseService.getReportStats();
            
            if (statsResult.success) {
                const stats = statsResult.data;
                
                
                updateElement('totalReportsAdmin', stats.total || 0);
                updateElement('criticalReportsAdmin', stats.byPriority?.critical || 0);
                updateElement('affectedAreasAdmin', Object.keys(stats.byIssueType || {}).length);
                updateElement('recentReportsAdmin', stats.recent || 0);
            }
        } catch (error) {
            console.error('Error loading analytics stats:', error);
        }
    }

    async function loadMostReportedRoads() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const reports = reportsResult.data;
                const roadCounts = {};
                
                
                reports.forEach(report => {
                    const location = report.location_description || 'Unknown Location';
                    roadCounts[location] = (roadCounts[location] || 0) + 1;
                });
                
                
                const sortedRoads = Object.entries(roadCounts)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5);
                
                updateLeaderboard('mostReportedListAdmin', sortedRoads, 'reports');
            }
        } catch (error) {
            console.error('Error loading most reported roads:', error);
        }
    }

    async function loadMostUrgentRoads() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const urgentReports = reportsResult.data
                    .filter(report => ['critical', 'high'].includes(report.priority?.toLowerCase()))
                    .sort((a, b) => {
                        const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };
                        return (priorityOrder[b.priority?.toLowerCase()] || 0) - 
                               (priorityOrder[a.priority?.toLowerCase()] || 0);
                    })
                    .slice(0, 5);
                
                updateUrgentList('mostUrgentListAdmin', urgentReports);
            }
        } catch (error) {
            console.error('Error loading most urgent roads:', error);
        }
    }

    async function loadIssueTypesDistribution() {
        try {
            const statsResult = await DatabaseService.getReportStats();
            
            if (statsResult.success) {
                const issueTypes = Object.entries(statsResult.data.byIssueType || {})
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5);
                
                updateLeaderboard('issueTypesListAdmin', issueTypes, 'issues');
            }
        } catch (error) {
            console.error('Error loading issue types:', error);
        }
    }

    async function loadAffectedAreas() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const areaCounts = {};
                
                
                reportsResult.data.forEach(report => {
                    const location = report.location_description || 'Unknown Area';
                    
                    const area = location.split(',')[0] || location.substring(0, 30);
                    areaCounts[area] = (areaCounts[area] || 0) + 1;
                });
                
                const sortedAreas = Object.entries(areaCounts)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5);
                
                updateLeaderboard('affectedAreasListAdmin', sortedAreas, 'reports');
            }
        } catch (error) {
            console.error('Error loading affected areas:', error);
        }
    }

    async function loadRecentActivityAdmin() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const recentReports = reportsResult.data
                    .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
                    .slice(0, 10);
                
                updateRecentActivity('recentActivityAdmin', recentReports);
            }
        } catch (error) {
            console.error('Error loading recent activity:', error);
        }
    }

    function updateElement(id, value) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
        }
    }

    function updateLeaderboard(containerId, data, type) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        if (data.length === 0) {
            container.innerHTML = '<div class="loading">No data available</div>';
            return;
        }
        
        const html = data.map(([name, count], index) => `
            <div class="leaderboard-item">
                <div class="leaderboard-rank">${index + 1}</div>
                <div class="leaderboard-info">
                    <h4>${truncateText(name, 40)}</h4>
                    <p>${count} ${type}</p>
                </div>
                <div class="leaderboard-count">${count}</div>
            </div>
        `).join('');
        
        container.innerHTML = html;
    }

    function updateUrgentList(containerId, reports) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        if (reports.length === 0) {
            container.innerHTML = '<div class="loading">No urgent reports</div>';
            return;
        }
        
        const html = reports.map((report, index) => `
            <div class="leaderboard-item">
                <div class="leaderboard-rank">${index + 1}</div>
                <div class="leaderboard-info">
                    <h4>${truncateText(report.location_description || 'Unknown Location', 40)}</h4>
                    <p>${report.issue_type || 'Unknown Issue'} - ${report.priority || 'Unknown'} Priority</p>
                </div>
                <div class="leaderboard-count priority-${report.priority?.toLowerCase() || 'unknown'}">${report.priority || '?'}</div>
            </div>
        `).join('');
        
        container.innerHTML = html;
    }

    function updateRecentActivity(containerId, reports) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        if (reports.length === 0) {
            container.innerHTML = '<div class="loading">No recent activity</div>';
            return;
        }
        
        const html = reports.map(report => {
            const priority = report.priority?.toLowerCase() || 'medium';
            const icon = getSeverityIcon(report.priority);
            const timeAgo = getTimeAgo(report.created_at);
            
            return `
                <div class="activity-item">
                    <div class="activity-icon ${priority}">
                        <i class='bx ${icon}'></i>
                    </div>
                    <div class="activity-content">
                        <h4>${truncateText(report.location_description || 'Unknown Location', 35)}</h4>
                        <p>${truncateText(report.description || report.issue_type || 'No description', 50)}</p>
                    </div>
                    <div class="activity-time">${timeAgo}</div>
                </div>
            `;
        }).join('');
        
        container.innerHTML = html;
    }

    function getTimeAgo(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        const diffMs = now - date;
        const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
        const diffDays = Math.floor(diffHours / 24);
        
        if (diffDays > 0) {
            return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;
        } else if (diffHours > 0) {
            return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;
        } else {
            return 'Recently';
        }
    }

    
    async function initializeDashboard() {
        try {
            
            if (typeof window.DatabaseService !== 'undefined' && !DatabaseService.isAvailable()) {
                showNotification(
                    'Demo Mode: Database not configured. Showing sample data. Check console for setup instructions.', 
                    'info', 
                    8000
                );
            }

            
            await loadDashboardStats();
            
            
            await loadRecentReports();

            
            await loadAnalyticsData();
            
            console.log('Dashboard initialized with real data');
        } catch (error) {
            console.error('Error initializing dashboard:', error);
            showNotification('Failed to load dashboard data. Using sample data.', 'warning');
        }
    }

    async function loadAnalyticsData() {
        try {
            
            await Promise.all([
                loadAnalyticsStats(),
                loadMostReportedRoads(),
                loadMostUrgentRoads(),
                loadIssueTypesDistribution(),
                loadAffectedAreas(),
                loadRecentActivityAdmin()
            ]);

            console.log('Analytics data loaded successfully');
        } catch (error) {
            console.error('Error loading analytics data:', error);
        }
    }

    async function loadAnalyticsStats() {
        try {
            const statsResult = await DatabaseService.getReportStats();
            
            if (statsResult.success) {
                const stats = statsResult.data;
                
                
                updateElement('totalReportsAdmin', stats.total || 0);
                updateElement('criticalReportsAdmin', stats.byPriority?.critical || 0);
                updateElement('affectedAreasAdmin', Object.keys(stats.byIssueType || {}).length);
                updateElement('recentReportsAdmin', stats.recent || 0);
            }
        } catch (error) {
            console.error('Error loading analytics stats:', error);
        }
    }

    async function loadMostReportedRoads() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const reports = reportsResult.data;
                const roadCounts = {};
                
                
                reports.forEach(report => {
                    const location = report.location_description || 'Unknown Location';
                    roadCounts[location] = (roadCounts[location] || 0) + 1;
                });
                
                
                const sortedRoads = Object.entries(roadCounts)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5);
                
                updateLeaderboard('mostReportedListAdmin', sortedRoads, 'reports');
            }
        } catch (error) {
            console.error('Error loading most reported roads:', error);
        }
    }

    async function loadMostUrgentRoads() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const urgentReports = reportsResult.data
                    .filter(report => ['critical', 'high'].includes(report.priority?.toLowerCase()))
                    .sort((a, b) => {
                        const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };
                        return (priorityOrder[b.priority?.toLowerCase()] || 0) - 
                               (priorityOrder[a.priority?.toLowerCase()] || 0);
                    })
                    .slice(0, 5);
                
                updateUrgentList('mostUrgentListAdmin', urgentReports);
            }
        } catch (error) {
            console.error('Error loading most urgent roads:', error);
        }
    }

    async function loadIssueTypesDistribution() {
        try {
            const statsResult = await DatabaseService.getReportStats();
            
            if (statsResult.success) {
                const issueTypes = Object.entries(statsResult.data.byIssueType || {})
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5);
                
                updateLeaderboard('issueTypesListAdmin', issueTypes, 'issues');
            }
        } catch (error) {
            console.error('Error loading issue types:', error);
        }
    }

    async function loadAffectedAreas() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const areaCounts = {};
                
                
                reportsResult.data.forEach(report => {
                    const location = report.location_description || 'Unknown Area';
                    
                    const area = location.split(',')[0] || location.substring(0, 30);
                    areaCounts[area] = (areaCounts[area] || 0) + 1;
                });
                
                const sortedAreas = Object.entries(areaCounts)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5);
                
                updateLeaderboard('affectedAreasListAdmin', sortedAreas, 'reports');
            }
        } catch (error) {
            console.error('Error loading affected areas:', error);
        }
    }

    async function loadRecentActivityAdmin() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const recentReports = reportsResult.data
                    .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
                    .slice(0, 10);
                
                updateRecentActivity('recentActivityAdmin', recentReports);
            }
        } catch (error) {
            console.error('Error loading recent activity:', error);
        }
    }

    function updateElement(id, value) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
        }
    }

    function updateLeaderboard(containerId, data, type) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        if (data.length === 0) {
            container.innerHTML = '<div class="loading">No data available</div>';
            return;
        }
        
        const html = data.map(([name, count], index) => `
            <div class="leaderboard-item">
                <div class="leaderboard-rank">${index + 1}</div>
                <div class="leaderboard-info">
                    <h4>${truncateText(name, 40)}</h4>
                    <p>${count} ${type}</p>
                </div>
                <div class="leaderboard-count">${count}</div>
            </div>
        `).join('');
        
        container.innerHTML = html;
    }

    function updateUrgentList(containerId, reports) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        if (reports.length === 0) {
            container.innerHTML = '<div class="loading">No urgent reports</div>';
            return;
        }
        
        const html = reports.map((report, index) => `
            <div class="leaderboard-item">
                <div class="leaderboard-rank">${index + 1}</div>
                <div class="leaderboard-info">
                    <h4>${truncateText(report.location_description || 'Unknown Location', 40)}</h4>
                    <p>${report.issue_type || 'Unknown Issue'} - ${report.priority || 'Unknown'} Priority</p>
                </div>
                <div class="leaderboard-count priority-${report.priority?.toLowerCase() || 'unknown'}">${report.priority || '?'}</div>
            </div>
        `).join('');
        
        container.innerHTML = html;
    }

    function updateRecentActivity(containerId, reports) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        if (reports.length === 0) {
            container.innerHTML = '<div class="loading">No recent activity</div>';
            return;
        }
        
        const html = reports.map(report => {
            const priority = report.priority?.toLowerCase() || 'medium';
            const icon = getSeverityIcon(report.priority);
            const timeAgo = getTimeAgo(report.created_at);
            
            return `
                <div class="activity-item">
                    <div class="activity-icon ${priority}">
                        <i class='bx ${icon}'></i>
                    </div>
                    <div class="activity-content">
                        <h4>${truncateText(report.location_description || 'Unknown Location', 35)}</h4>
                        <p>${truncateText(report.description || report.issue_type || 'No description', 50)}</p>
                    </div>
                    <div class="activity-time">${timeAgo}</div>
                </div>
            `;
        }).join('');
        
        container.innerHTML = html;
    }

    function getTimeAgo(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        const diffMs = now - date;
        const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
        const diffDays = Math.floor(diffHours / 24);
        
        if (diffDays > 0) {
            return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;
        } else if (diffHours > 0) {
            return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;
        } else {
            return 'Recently';
        }
    }

    
    async function initializeDashboard() {
        try {
            
            if (typeof window.DatabaseService !== 'undefined' && !DatabaseService.isAvailable()) {
                showNotification(
                    'Demo Mode: Database not configured. Showing sample data. Check console for setup instructions.', 
                    'info', 
                    8000
                );
            }

            
            await loadDashboardStats();
            
            
            await loadRecentReports();

            
            await loadAnalyticsData();
            
            console.log('Dashboard initialized with real data');
        } catch (error) {
            console.error('Error initializing dashboard:', error);
            showNotification('Failed to load dashboard data. Using sample data.', 'warning');
        }
    }

    async function loadAnalyticsData() {
        try {
            
            await Promise.all([
                loadAnalyticsStats(),
                loadMostReportedRoads(),
                loadMostUrgentRoads(),
                loadIssueTypesDistribution(),
                loadAffectedAreas(),
                loadRecentActivityAdmin()
            ]);

            console.log('Analytics data loaded successfully');
        } catch (error) {
            console.error('Error loading analytics data:', error);
        }
    }

    async function loadAnalyticsStats() {
        try {
            const statsResult = await DatabaseService.getReportStats();
            
            if (statsResult.success) {
                const stats = statsResult.data;
                
                
                updateElement('totalReportsAdmin', stats.total || 0);
                updateElement('criticalReportsAdmin', stats.byPriority?.critical || 0);
                updateElement('affectedAreasAdmin', Object.keys(stats.byIssueType || {}).length);
                updateElement('recentReportsAdmin', stats.recent || 0);
            }
        } catch (error) {
            console.error('Error loading analytics stats:', error);
        }
    }

    async function loadMostReportedRoads() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const reports = reportsResult.data;
                const roadCounts = {};
                
                
                reports.forEach(report => {
                    const location = report.location_description || 'Unknown Location';
                    roadCounts[location] = (roadCounts[location] || 0) + 1;
                });
                
                
                const sortedRoads = Object.entries(roadCounts)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5);
                
                updateLeaderboard('mostReportedListAdmin', sortedRoads, 'reports');
            }
        } catch (error) {
            console.error('Error loading most reported roads:', error);
        }
    }

    async function loadMostUrgentRoads() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const urgentReports = reportsResult.data
                    .filter(report => ['critical', 'high'].includes(report.priority?.toLowerCase()))
                    .sort((a, b) => {
                        const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };
                        return (priorityOrder[b.priority?.toLowerCase()] || 0) - 
                               (priorityOrder[a.priority?.toLowerCase()] || 0);
                    })
                    .slice(0, 5);
                
                updateUrgentList('mostUrgentListAdmin', urgentReports);
            }
        } catch (error) {
            console.error('Error loading most urgent roads:', error);
        }
    }

    async function loadIssueTypesDistribution() {
        try {
            const statsResult = await DatabaseService.getReportStats();
            
            if (statsResult.success) {
                const issueTypes = Object.entries(statsResult.data.byIssueType || {})
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5);
                
                updateLeaderboard('issueTypesListAdmin', issueTypes, 'issues');
            }
        } catch (error) {
            console.error('Error loading issue types:', error);
        }
    }

    async function loadAffectedAreas() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const areaCounts = {};
                
                
                reportsResult.data.forEach(report => {
                    const location = report.location_description || 'Unknown Area';
                    
                    const area = location.split(',')[0] || location.substring(0, 30);
                    areaCounts[area] = (areaCounts[area] || 0) + 1;
                });
                
                const sortedAreas = Object.entries(areaCounts)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5);
                
                updateLeaderboard('affectedAreasListAdmin', sortedAreas, 'reports');
            }
        } catch (error) {
            console.error('Error loading affected areas:', error);
        }
    }

    async function loadRecentActivityAdmin() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const recentReports = reportsResult.data
                    .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
                    .slice(0, 10);
                
                updateRecentActivity('recentActivityAdmin', recentReports);
            }
        } catch (error) {
            console.error('Error loading recent activity:', error);
        }
    }

    function updateElement(id, value) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
        }
    }

    function updateLeaderboard(containerId, data, type) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        if (data.length === 0) {
            container.innerHTML = '<div class="loading">No data available</div>';
            return;
        }
        
        const html = data.map(([name, count], index) => `
            <div class="leaderboard-item">
                <div class="leaderboard-rank">${index + 1}</div>
                <div class="leaderboard-info">
                    <h4>${truncateText(name, 40)}</h4>
                    <p>${count} ${type}</p>
                </div>
                <div class="leaderboard-count">${count}</div>
            </div>
        `).join('');
        
        container.innerHTML = html;
    }

    function updateUrgentList(containerId, reports) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        if (reports.length === 0) {
            container.innerHTML = '<div class="loading">No urgent reports</div>';
            return;
        }
        
        const html = reports.map((report, index) => `
            <div class="leaderboard-item">
                <div class="leaderboard-rank">${index + 1}</div>
                <div class="leaderboard-info">
                    <h4>${truncateText(report.location_description || 'Unknown Location', 40)}</h4>
                    <p>${report.issue_type || 'Unknown Issue'} - ${report.priority || 'Unknown'} Priority</p>
                </div>
                <div class="leaderboard-count priority-${report.priority?.toLowerCase() || 'unknown'}">${report.priority || '?'}</div>
            </div>
        `).join('');
        
        container.innerHTML = html;
    }

    function updateRecentActivity(containerId, reports) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        if (reports.length === 0) {
            container.innerHTML = '<div class="loading">No recent activity</div>';
            return;
        }
        
        const html = reports.map(report => {
            const priority = report.priority?.toLowerCase() || 'medium';
            const icon = getSeverityIcon(report.priority);
            const timeAgo = getTimeAgo(report.created_at);
            
            return `
                <div class="activity-item">
                    <div class="activity-icon ${priority}">
                        <i class='bx ${icon}'></i>
                    </div>
                    <div class="activity-content">
                        <h4>${truncateText(report.location_description || 'Unknown Location', 35)}</h4>
                        <p>${truncateText(report.description || report.issue_type || 'No description', 50)}</p>
                    </div>
                    <div class="activity-time">${timeAgo}</div>
                </div>
            `;
        }).join('');
        
        container.innerHTML = html;
    }

    function getTimeAgo(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        const diffMs = now - date;
        const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
        const diffDays = Math.floor(diffHours / 24);
        
        if (diffDays > 0) {
            return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;
        } else if (diffHours > 0) {
            return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;
        } else {
            return 'Recently';
        }
    }

    
    async function initializeDashboard() {
        try {
            
            if (typeof window.DatabaseService !== 'undefined' && !DatabaseService.isAvailable()) {
                showNotification(
                    'Demo Mode: Database not configured. Showing sample data. Check console for setup instructions.', 
                    'info', 
                    8000
                );
            }

            
            await loadDashboardStats();
            
            
            await loadRecentReports();

            
            await loadAnalyticsData();
            
            console.log('Dashboard initialized with real data');
        } catch (error) {
            console.error('Error initializing dashboard:', error);
            showNotification('Failed to load dashboard data. Using sample data.', 'warning');
        }
    }

    async function loadAnalyticsData() {
        try {
            
            await Promise.all([
                loadAnalyticsStats(),
                loadMostReportedRoads(),
                loadMostUrgentRoads(),
                loadIssueTypesDistribution(),
                loadAffectedAreas(),
                loadRecentActivityAdmin()
            ]);

            console.log('Analytics data loaded successfully');
        } catch (error) {
            console.error('Error loading analytics data:', error);
        }
    }

    async function loadAnalyticsStats() {
        try {
            const statsResult = await DatabaseService.getReportStats();
            
            if (statsResult.success) {
                const stats = statsResult.data;
                
                
                updateElement('totalReportsAdmin', stats.total || 0);
                updateElement('criticalReportsAdmin', stats.byPriority?.critical || 0);
                updateElement('affectedAreasAdmin', Object.keys(stats.byIssueType || {}).length);
                updateElement('recentReportsAdmin', stats.recent || 0);
            }
        } catch (error) {
            console.error('Error loading analytics stats:', error);
        }
    }

    async function loadMostReportedRoads() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const reports = reportsResult.data;
                const roadCounts = {};
                
                
                reports.forEach(report => {
                    const location = report.location_description || 'Unknown Location';
                    roadCounts[location] = (roadCounts[location] || 0) + 1;
                });
                
                
                const sortedRoads = Object.entries(roadCounts)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5);
                
                updateLeaderboard('mostReportedListAdmin', sortedRoads, 'reports');
            }
        } catch (error) {
            console.error('Error loading most reported roads:', error);
        }
    }

    async function loadMostUrgentRoads() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const urgentReports = reportsResult.data
                    .filter(report => ['critical', 'high'].includes(report.priority?.toLowerCase()))
                    .sort((a, b) => {
                        const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };
                        return (priorityOrder[b.priority?.toLowerCase()] || 0) - 
                               (priorityOrder[a.priority?.toLowerCase()] || 0);
                    })
                    .slice(0, 5);
                
                updateUrgentList('mostUrgentListAdmin', urgentReports);
            }
        } catch (error) {
            console.error('Error loading most urgent roads:', error);
        }
    }

    async function loadIssueTypesDistribution() {
        try {
            const statsResult = await DatabaseService.getReportStats();
            
            if (statsResult.success) {
                const issueTypes = Object.entries(statsResult.data.byIssueType || {})
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5);
                
                updateLeaderboard('issueTypesListAdmin', issueTypes, 'issues');
            }
        } catch (error) {
            console.error('Error loading issue types:', error);
        }
    }

    async function loadAffectedAreas() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const areaCounts = {};
                
                
                reportsResult.data.forEach(report => {
                    const location = report.location_description || 'Unknown Area';
                    
                    const area = location.split(',')[0] || location.substring(0, 30);
                    areaCounts[area] = (areaCounts[area] || 0) + 1;
                });
                
                const sortedAreas = Object.entries(areaCounts)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5);
                
                updateLeaderboard('affectedAreasListAdmin', sortedAreas, 'reports');
            }
        } catch (error) {
            console.error('Error loading affected areas:', error);
        }
    }

    async function loadRecentActivityAdmin() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const recentReports = reportsResult.data
                    .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
                    .slice(0, 10);
                
                updateRecentActivity('recentActivityAdmin', recentReports);
            }
        } catch (error) {
            console.error('Error loading recent activity:', error);
        }
    }

    function updateElement(id, value) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
        }
    }

    function updateLeaderboard(containerId, data, type) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        if (data.length === 0) {
            container.innerHTML = '<div class="loading">No data available</div>';
            return;
        }
        
        const html = data.map(([name, count], index) => `
            <div class="leaderboard-item">
                <div class="leaderboard-rank">${index + 1}</div>
                <div class="leaderboard-info">
                    <h4>${truncateText(name, 40)}</h4>
                    <p>${count} ${type}</p>
                </div>
                <div class="leaderboard-count">${count}</div>
            </div>
        `).join('');
        
        container.innerHTML = html;
    }

    function updateUrgentList(containerId, reports) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        if (reports.length === 0) {
            container.innerHTML = '<div class="loading">No urgent reports</div>';
            return;
        }
        
        const html = reports.map((report, index) => `
            <div class="leaderboard-item">
                <div class="leaderboard-rank">${index + 1}</div>
                <div class="leaderboard-info">
                    <h4>${truncateText(report.location_description || 'Unknown Location', 40)}</h4>
                    <p>${report.issue_type || 'Unknown Issue'} - ${report.priority || 'Unknown'} Priority</p>
                </div>
                <div class="leaderboard-count priority-${report.priority?.toLowerCase() || 'unknown'}">${report.priority || '?'}</div>
            </div>
        `).join('');
        
        container.innerHTML = html;
    }

    function updateRecentActivity(containerId, reports) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        if (reports.length === 0) {
            container.innerHTML = '<div class="loading">No recent activity</div>';
            return;
        }
        
        const html = reports.map(report => {
            const priority = report.priority?.toLowerCase() || 'medium';
            const icon = getSeverityIcon(report.priority);
            const timeAgo = getTimeAgo(report.created_at);
            
            return `
                <div class="activity-item">
                    <div class="activity-icon ${priority}">
                        <i class='bx ${icon}'></i>
                    </div>
                    <div class="activity-content">
                        <h4>${truncateText(report.location_description || 'Unknown Location', 35)}</h4>
                        <p>${truncateText(report.description || report.issue_type || 'No description', 50)}</p>
                    </div>
                    <div class="activity-time">${timeAgo}</div>
                </div>
            `;
        }).join('');
        
        container.innerHTML = html;
    }

    function getTimeAgo(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        const diffMs = now - date;
        const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
        const diffDays = Math.floor(diffHours / 24);
        
        if (diffDays > 0) {
            return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;
        } else if (diffHours > 0) {
            return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;
        } else {
            return 'Recently';
        }
    }

    
    async function initializeDashboard() {
        try {
            
            if (typeof window.DatabaseService !== 'undefined' && !DatabaseService.isAvailable()) {
                showNotification(
                    'Demo Mode: Database not configured. Showing sample data. Check console for setup instructions.', 
                    'info', 
                    8000
                );
            }

            
            await loadDashboardStats();
            
            
            await loadRecentReports();

            
            await loadAnalyticsData();
            
            console.log('Dashboard initialized with real data');
        } catch (error) {
            console.error('Error initializing dashboard:', error);
            showNotification('Failed to load dashboard data. Using sample data.', 'warning');
        }
    }

    async function loadAnalyticsData() {
        try {
            
            await Promise.all([
                loadAnalyticsStats(),
                loadMostReportedRoads(),
                loadMostUrgentRoads(),
                loadIssueTypesDistribution(),
                loadAffectedAreas(),
                loadRecentActivityAdmin()
            ]);

            console.log('Analytics data loaded successfully');
        } catch (error) {
            console.error('Error loading analytics data:', error);
        }
    }

    async function loadAnalyticsStats() {
        try {
            const statsResult = await DatabaseService.getReportStats();
            
            if (statsResult.success) {
                const stats = statsResult.data;
                
                
                updateElement('totalReportsAdmin', stats.total || 0);
                updateElement('criticalReportsAdmin', stats.byPriority?.critical || 0);
                updateElement('affectedAreasAdmin', Object.keys(stats.byIssueType || {}).length);
                updateElement('recentReportsAdmin', stats.recent || 0);
            }
        } catch (error) {
            console.error('Error loading analytics stats:', error);
        }
    }

    async function loadMostReportedRoads() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const reports = reportsResult.data;
                const roadCounts = {};
                
                
                reports.forEach(report => {
                    const location = report.location_description || 'Unknown Location';
                    roadCounts[location] = (roadCounts[location] || 0) + 1;
                });
                
                
                const sortedRoads = Object.entries(roadCounts)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5);
                
                updateLeaderboard('mostReportedListAdmin', sortedRoads, 'reports');
            }
        } catch (error) {
            console.error('Error loading most reported roads:', error);
        }
    }

    async function loadMostUrgentRoads() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const urgentReports = reportsResult.data
                    .filter(report => ['critical', 'high'].includes(report.priority?.toLowerCase()))
                    .sort((a, b) => {
                        const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };
                        return (priorityOrder[b.priority?.toLowerCase()] || 0) - 
                               (priorityOrder[a.priority?.toLowerCase()] || 0);
                    })
                    .slice(0, 5);
                
                updateUrgentList('mostUrgentListAdmin', urgentReports);
            }
        } catch (error) {
            console.error('Error loading most urgent roads:', error);
        }
    }

    async function loadIssueTypesDistribution() {
        try {
            const statsResult = await DatabaseService.getReportStats();
            
            if (statsResult.success) {
                const issueTypes = Object.entries(statsResult.data.byIssueType || {})
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5);
                
                updateLeaderboard('issueTypesListAdmin', issueTypes, 'issues');
            }
        } catch (error) {
            console.error('Error loading issue types:', error);
        }
    }

    async function loadAffectedAreas() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const areaCounts = {};
                
                
                reportsResult.data.forEach(report => {
                    const location = report.location_description || 'Unknown Area';
                    
                    const area = location.split(',')[0] || location.substring(0, 30);
                    areaCounts[area] = (areaCounts[area] || 0) + 1;
                });
                
                const sortedAreas = Object.entries(areaCounts)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5);
                
                updateLeaderboard('affectedAreasListAdmin', sortedAreas, 'reports');
            }
        } catch (error) {
            console.error('Error loading affected areas:', error);
        }
    }

    async function loadRecentActivityAdmin() {
        try {
            const reportsResult = await DatabaseService.getAllReports();
            
            if (reportsResult.success) {
                const recentReports = reportsResult.data
                    .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
                    .slice(0, 10);
                
                updateRecentActivity('recentActivityAdmin', recentReports);
            }
        } catch (error) {
            console.error('Error loading recent activity:', error);
        }
    }

    function updateElement(id, value) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
        }
    }

    function updateLeaderboard(containerId, data, type) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        if (data.length === 0) {
            container.innerHTML = '<div class="loading">No data available</div>';
            return;
        }
        
        const html = data.map(([name, count], index) => `
            <div class="leaderboard-item">
                <div class="leaderboard-rank">${index + 1}</div>
                <div class="leaderboard-info">
                    <h4>${truncateText(name, 40)}</h4>
                    <p>${count} ${type}</p>
                </div>
                <div class="leaderboard-count">${count}</div>
            </div>
        `).join('');
        
        container.innerHTML = html;
    }

    function updateUrgentList(containerId, reports) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        if (reports.length === 0) {
            container.innerHTML = '<div class="loading">No urgent reports</div>';
            return;
        }
        
        const html = reports.map((report, index) => `
            <div class="leaderboard-item">
                <div class="leaderboard-rank">${index + 1}</div>
                <div class="leaderboard-info">
                    <h4>${truncateText(report.location_description || 'Unknown Location', 40)}</h4>
                    <p>${report.issue_type || 'Unknown Issue'} - ${report.priority || 'Unknown'} Priority</p>
                </div>
                <div class="leaderboard-count priority-${report.priority?.toLowerCase() || 'unknown'}">${report.priority || '?'}</div>
            </div>
        `).join('');
        
        container.innerHTML = html;
    }

    function updateRecentActivity(containerId, reports) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        if (reports.length === 0) {
            container.innerHTML = '<div class="loading">No recent activity</div>';
            return;
        }
        
        const html = reports.map(report => {
            const priority = report.priority?.toLowerCase() || 'medium';
            const icon = getSeverityIcon(report.priority);
            const timeAgo = getTimeAgo(report.created_at);
            
            return `
                <div class="activity-item">
                    <div class="activity-icon ${priority}">
                        <i class='bx ${icon}'></i>
                    </div>
                    <div class="activity-content">
                        <h4>${truncateText(report.location_description || 'Unknown Location', 35)}</h4>
                        <p>${truncateText(report.description || report.issue_type || 'No description', 50)}</p>
                    </div>
                    <div class="activity-time">${timeAgo}</div>
                </div>
            `;
        }).join('');
        
        container.innerHTML = html;
    }

    function getTimeAgo(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        const diffMs = now - date;
        const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
        const diffDays = Math.floor(diffHours / 24);
        
        if (diffDays > 0) {
            return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;
        } else if (diffHours > 0) {
            return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;
        } else {
            return 'Recently';
        }
    }
});
