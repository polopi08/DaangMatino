import Dispatcher from './dispatcher'

declare namespace MockCallHistoryLog {
  
  export type MockCallHistoryLogProperties = 'protocol' | 'host' | 'port' | 'origin' | 'path' | 'hash' | 'fullUrl' | 'method' | 'searchParams' | 'body' | 'headers'
}


declare class MockCallHistoryLog {
  constructor (requestInit: Dispatcher.DispatchOptions)
  
  protocol: string
  
  host: string
  
  port: string
  
  origin: string
  
  path: string
  
  hash: string
  
  fullUrl: string
  
  method: string
  
  searchParams: Record<string, string>
  
  body: string | null | undefined
  
  headers: Record<string, string | string[]> | null | undefined

  
  toMap (): Map<MockCallHistoryLog.MockCallHistoryLogProperties, string | Record<string, string | string[]> | null | undefined>

  
  toString (): string
}

declare namespace MockCallHistory {
  export type FilterCallsOperator = 'AND' | 'OR'

  
  export interface FilterCallsOptions {
    
    operator?: FilterCallsOperator | Lowercase<FilterCallsOperator>
  }
  
  export type FilterCallsFunctionCriteria = (log: MockCallHistoryLog) => boolean

  
  export type FilterCallsParameter = string | RegExp | undefined | null

  
  export interface FilterCallsObjectCriteria extends Record<string, FilterCallsParameter> {
    
    protocol?: FilterCallsParameter;
    
    host?: FilterCallsParameter;
    
    port?: FilterCallsParameter;
    
    origin?: FilterCallsParameter;
    
    path?: FilterCallsParameter;
    
    hash?: FilterCallsParameter;
    
    fullUrl?: FilterCallsParameter;
    
    method?: FilterCallsParameter;
  }
}


declare class MockCallHistory {
  constructor (name: string)
  
  calls (): Array<MockCallHistoryLog>
  
  firstCall (): MockCallHistoryLog | undefined
  
  lastCall (): MockCallHistoryLog | undefined
  
  nthCall (position: number): MockCallHistoryLog | undefined
  
  filterCalls (criteria: MockCallHistory.FilterCallsFunctionCriteria | MockCallHistory.FilterCallsObjectCriteria | RegExp, options?: MockCallHistory.FilterCallsOptions): Array<MockCallHistoryLog>
  
  filterCallsByProtocol (protocol: MockCallHistory.FilterCallsParameter): Array<MockCallHistoryLog>
  
  filterCallsByHost (host: MockCallHistory.FilterCallsParameter): Array<MockCallHistoryLog>
  
  filterCallsByPort (port: MockCallHistory.FilterCallsParameter): Array<MockCallHistoryLog>
  
  filterCallsByOrigin (origin: MockCallHistory.FilterCallsParameter): Array<MockCallHistoryLog>
  
  filterCallsByPath (path: MockCallHistory.FilterCallsParameter): Array<MockCallHistoryLog>
  
  filterCallsByHash (hash: MockCallHistory.FilterCallsParameter): Array<MockCallHistoryLog>
  
  filterCallsByFullUrl (fullUrl: MockCallHistory.FilterCallsParameter): Array<MockCallHistoryLog>
  
  filterCallsByMethod (method: MockCallHistory.FilterCallsParameter): Array<MockCallHistoryLog>
  
  clear (): void
  
  [Symbol.iterator]: () => Generator<MockCallHistoryLog>
}

export { MockCallHistoryLog, MockCallHistory }
