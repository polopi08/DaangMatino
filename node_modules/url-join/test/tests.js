var urljoin = require('../lib/url-join');
var assert = require('assert');

describe('url join', function () {
  it('should work for simple case', function () {
    urljoin('http:
      .should.eql('http:
  });

  it('should work for simple case with new syntax', function () {
    urljoin(['http:
      .should.eql('http:
  });

  it('should work for hashbang urls', function () {
    urljoin(['http:
      .should.eql('http:
  });

  it('should be able to join protocol', function () {
    urljoin('http:', 'www.google.com/', 'foo/bar', '?test=123')
      .should.eql('http:
  });

  it('should be able to join protocol with slashes', function () {
    urljoin('http:
      .should.eql('http:
  });

  it('should remove extra slashes', function () {
    urljoin('http:', 'www.google.com
      .should.eql('http:
  });

  it('should not remove extra slashes in an encoded URL', function () {
    urljoin('http:', 'www.google.com
      .should.eql('http:

    urljoin('http:
      .should.eql('http:
      .should.not.eql('http:
  });

  it('should support anchors in urls', function () {
    urljoin('http:', 'www.google.com
      .should.eql('http:
  });

  it('should support protocol-relative urls', function () {
    urljoin('
      .should.eql('
  });

  it('should support file protocol urls', function () {
    urljoin('file:/', 'android_asset', 'foo/bar')
      .should.eql('file:

    urljoin('file:', '/android_asset', 'foo/bar')
      .should.eql('file:
  });

  it('should support absolute file protocol urls', function () {
    urljoin('file:', '
      .should.eql('file:

    urljoin('file:
      .should.eql('file:

    urljoin('file:
      .should.eql('file:

    urljoin('file:
      .should.eql('file:
  });

  it('should merge multiple query params properly', function () {
    urljoin('http:', 'www.google.com
      .should.eql('http:

    urljoin('http:', 'www.google.com
      .should.eql('http:

    urljoin('http:
      .should.eql('http:
  });

  it('should merge slashes in paths correctly', function () {
    urljoin('http:
      .should.eql('http:
  });

  it('should merge colons in paths correctly', function () {
    urljoin('http:
      .should.eql('http:
  });

  it('should merge just a simple path without URL correctly', function() {
    urljoin('/', 'test')
      .should.eql('/test');
  });

  it('should fail with segments that are not string', function() {
    assert.throws(() => urljoin(true),
                  /Url must be a string. Received true/);
    assert.throws(() => urljoin('http:
                  /Url must be a string. Received 1/);
    assert.throws(() => urljoin('http:
                  /Url must be a string. Received undefined/);
    assert.throws(() => urljoin('http:
                  /Url must be a string. Received null/);
    assert.throws(() => urljoin('http:
                  /Url must be a string. Received \[object Object\]/);
  });

  it('should merge a path with colon properly', function(){
    urljoin('/users/:userId', '/cars/:carId')
      .should.eql('/users/:userId/cars/:carId');
  });

  it('should merge slashes in protocol correctly', function () {
    urljoin('http:
      .should.eql('http:
    urljoin('http:', '
      .should.eql('http:
    urljoin('http:
      .should.eql('http:
    urljoin('file:
      .should.eql('file:

    urljoin('file:example.org', 'a')
      .should.eql('file:

    urljoin('file:/', 'example.org', 'a')
      .should.eql('file:
    urljoin('file:', '/example.org', 'a')
      .should.eql('file:
    urljoin('file:', '
      .should.eql('file:
  });

  it('should skip empty strings', function() {
    urljoin('http:
      .should.eql('http:
    urljoin('', 'http:
      .should.eql('http:
  });

  it('should return an empty string if no arguments are supplied', function() {
    urljoin().should.eql('');
  });
});
